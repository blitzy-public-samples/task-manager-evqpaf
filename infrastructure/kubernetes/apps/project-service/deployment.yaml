# Kubernetes deployment configuration for the Project Service
# 
# Requirements Addressed:
# - Project Service Deployment (Technical Specification/System Architecture/Deployment Architecture)
#   Ensures the Project Service is deployed with appropriate scaling, resource allocation, 
#   and container configurations.
#
# Human Tasks:
# - Configure container registry credentials in Kubernetes
# - Set up monitoring and alerting for the deployment
# - Configure horizontal pod autoscaling thresholds
# - Review and adjust resource limits based on performance testing
# - Set up network policies for the service
# - Configure backup and disaster recovery procedures

apiVersion: apps/v1
kind: Deployment
metadata:
  name: project-service
  namespace: project-service
  labels:
    app: project-service
    component: backend
    tier: service
spec:
  # Replica count as specified in globals
  replicas: 3
  selector:
    matchLabels:
      app: project-service
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: project-service
        component: backend
        tier: service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
    spec:
      containers:
        - name: project-service
          image: ${CONTAINER_REGISTRY}/project-service:${IMAGE_TAG}
          imagePullPolicy: Always
          ports:
            - containerPort: 3000
              name: http
          env:
            # Database configuration
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: project-service-config
                  key: DB_HOST
            - name: DB_PORT
              valueFrom:
                configMapKeyRef:
                  name: project-service-config
                  key: DB_PORT
            - name: DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: project-service-config
                  key: DB_NAME
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: project-service-secrets
                  key: DB_USER
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: project-service-secrets
                  key: DB_PASSWORD
            - name: DB_SSL
              valueFrom:
                configMapKeyRef:
                  name: project-service-config
                  key: DB_SSL
            # Application configuration
            - name: NODE_ENV
              value: "production"
            - name: LOG_LEVEL
              value: "info"
            - name: PORT
              value: "3000"
          resources:
            requests:
              cpu: "200m"
              memory: "256Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health/ready
              port: http
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          volumeMounts:
            - name: logs
              mountPath: /app/logs
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: logs
          emptyDir: {}
        - name: tmp
          emptyDir: {}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      terminationGracePeriodSeconds: 60
      imagePullSecrets:
        - name: registry-credentials
---
# Service definition for the Project Service
apiVersion: v1
kind: Service
metadata:
  name: project-service
  namespace: project-service
  labels:
    app: project-service
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: project-service
---
# Horizontal Pod Autoscaler for dynamic scaling
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: project-service
  namespace: project-service
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: project-service
  minReplicas: 3
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Pods
          value: 2
          periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Pods
          value: 1
          periodSeconds: 120