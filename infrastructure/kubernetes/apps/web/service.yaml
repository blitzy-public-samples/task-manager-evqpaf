# Kubernetes version: 1.26+
#
# Requirements addressed:
# 1. Service Exposure (Technical Specification/System Architecture/Deployment Architecture)
#    - Exposes the Web Frontend application to external clients through a Kubernetes Service
#
# 2. Traffic Routing (Technical Specification/System Architecture/2.3.2 Communication Patterns)
#    - Routes traffic to the Web Frontend application within the Kubernetes cluster
#
# Human Tasks:
# 1. Verify that port 3000 matches the Web Frontend container port configuration
# 2. Ensure network policies allow traffic to this service from the Ingress controller
# 3. Configure monitoring and metrics collection for the service

apiVersion: v1
kind: Service
metadata:
  name: web-service
  namespace: task-management-system
  labels:
    app: web-frontend
    component: frontend
  annotations:
    description: "Web Frontend service endpoint for task management system"
    service.kubernetes.io/topology-aware-hints: "auto"  # Enable topology-aware routing if available
    prometheus.io/scrape: "true"  # Enable Prometheus metrics scraping
    prometheus.io/port: "3000"
    prometheus.io/path: "/metrics"

spec:
  # Using ClusterIP since external access is handled by Ingress
  type: ClusterIP
  
  # Selector to identify target pods
  selector:
    app: web-frontend
  
  # Port configuration
  ports:
    - name: http
      protocol: TCP
      port: 80        # Service port
      targetPort: 3000 # Container port where the Web Frontend listens
  
  # Session affinity configuration for better user experience
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800  # 3 hour timeout
  
  # Internal traffic policy for better performance
  internalTrafficPolicy: Cluster