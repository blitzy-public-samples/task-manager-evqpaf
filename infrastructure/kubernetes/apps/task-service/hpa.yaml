# Kubernetes version: 1.26+
# Purpose: Defines the Horizontal Pod Autoscaler (HPA) for the Task Service
#
# Requirements addressed:
# - Technical Specification/System Architecture/2.2 Component Details
#   Ensures Task Service scales dynamically based on resource usage to handle varying workloads efficiently
#   by automatically adjusting the number of replicas between 2 and 10 based on CPU and memory utilization.
#
# Human Tasks:
# 1. Verify that the target CPU and memory utilization thresholds (70% and 75%) align with production workload patterns
# 2. Ensure the min/max replica counts (2-10) are appropriate for production traffic expectations
# 3. Monitor scaling behavior during initial deployment and adjust thresholds if needed

apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: task-service-hpa
  namespace: task-management-system
  labels:
    app: task-management
    component: task-service
  annotations:
    description: "Horizontal Pod Autoscaler for Task Service"
    app.kubernetes.io/name: task-service
    app.kubernetes.io/part-of: task-management-system
    app.kubernetes.io/managed-by: kubernetes

spec:
  # Reference to the Task Service deployment that will be scaled
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: task-service

  # Scaling limits
  minReplicas: 2    # Ensures high availability even at low load
  maxReplicas: 10   # Prevents over-provisioning while allowing for significant scale

  # Metrics that trigger scaling decisions
  metrics:
    # CPU-based scaling
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70    # Scale out when CPU usage exceeds 70%

    # Memory-based scaling
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 75    # Scale out when memory usage exceeds 75%

  # Default behavior settings
  behavior:
    scaleUp:
      # Stabilization window to prevent rapid scaling
      stabilizationWindowSeconds: 60
      # Allow aggressive scaling up when needed
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 4
        periodSeconds: 15
      selectPolicy: Max

    scaleDown:
      # Longer stabilization window for scale down to prevent thrashing
      stabilizationWindowSeconds: 300
      # Conservative scale down policy
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Min